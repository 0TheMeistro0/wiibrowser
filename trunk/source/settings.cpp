 /****************************************************************************
 * Copyright (C) 2009
 * by Dimok
 *
 * This software is provided 'as-is', without any express or implied
 * warranty. In no event will the authors be held liable for any
 * damages arising from the use of this software.
 *
 * Permission is granted to anyone to use this software for any
 * purpose, including commercial applications, and to alter it and
 * redistribute it freely, subject to the following restrictions:
 *
 * 1. The origin of this software must not be misrepresented; you
 * must not claim that you wrote the original software. If you use
 * this software in a product, an acknowledgment in the product
 * documentation would be appreciated but is not required.
 *
 * 2. Altered source versions must be plainly marked as such, and
 * must not be misrepresented as being the original software.
 *
 * 3. This notice may not be removed or altered from any source
 * distribution.
 *
 * Settings.cpp
 *
 * Settings Class
 * for WiiXplorer 2009
 ***************************************************************************/
#include <ogcsys.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "Settings.h"

#define DEFAULT_APP_PATH    "apps/Wiibrowser/"
#define DEFAULT_HOMEPAGE    "www.google.com/"
#define CONFIGPATH          "apps/Wiibrowser/"
#define CONFIGNAME          "wiibrowser.cfg"

SSettings::SSettings()
{
    this->SetDefault();
}

SSettings::~SSettings()
{
}

void SSettings::SetDefault()
{
    Language = LANG_ENGLISH;
    Revision = 0;
    ShowTooltip = true;
    Autoupdate = true;
    sprintf(DefaultFolder, DEFAULT_APP_PATH);
    sprintf(Homepage, DEFAULT_HOMEPAGE);
}

bool SSettings::Save()
{
    if(!FindConfig())
        return false;

    char filedest[100];
    snprintf(filedest, sizeof(filedest), "%s", ConfigPath);

    file = fopen(ConfigPath, "w");
    if(!file)
    {
        fclose(file);
        return false;
    }

    fprintf(file, "# WiiBrowser Settingsfile\r\n");
	fprintf(file, "# Note: This file is automatically generated\r\n\r\n");
	fprintf(file, "# Main Settings\r\n\r\n");
	fprintf(file, "Language = %d\r\n", Language);
	fprintf(file, "Revision = %d\r\n", Revision);
	fprintf(file, "Autoupdate = %d\r\n", Autoupdate);
	fprintf(file, "ShowTooltip = %d\r\n", ShowTooltip);
	fprintf(file, "DefaultFolder = %s\r\n", DefaultFolder);
	fprintf(file, "Homepage = %s\r\n", Homepage);

    fclose(file);
    return true;
}

bool SSettings::FindConfig()
{
    bool found = false;
    snprintf(ConfigPath, sizeof(ConfigPath), "%s%s", CONFIGPATH, CONFIGNAME);
    found = CheckFile(ConfigPath);

    if(!found)
    {
        //! No existing config so try to find a place where we can write it too
        FILE * newFp = fopen(ConfigPath, "wb");
        found = (newFp != NULL);
        fclose(newFp);
        if (found)
            this->Save();
    }

    return found;
}

bool SSettings::Load()
{
    if(!FindConfig())
        return false;

	char line[1024];
    char filepath[300];
    snprintf(filepath, sizeof(filepath), "%s", ConfigPath);

    if(!CheckIntegrity(filepath))
    {
        this->Save();
        return false;
    }

	file = fopen(filepath, "r");
	if (!file)
	{
        fclose(file);
        return false;
	}

	while (fgets(line, sizeof(line), file))
	{
		if (line[0] == '#') continue;

        this->ParseLine(line);
	}
	fclose(file);

	return true;
}

bool SSettings::Reset()
{
    this->SetDefault();

    if(this->Save())
        return true;

	return false;
}

bool SSettings::SetSetting(char *name, char *value)
{
    int i = 0;

    if (strcmp(name, "Language") == 0) {
		if (sscanf(value, "%d", &i) == 1) {
			Language = i;
		}
		return true;
	}
	if (strcmp(name, "Revision") == 0) {
		if (sscanf(value, "%d", &i) == 1) {
			Revision = i;
		}
		return true;
	}
    else if (strcmp(name, "Autoupdate") == 0) {
		if (sscanf(value, "%d", &i) == 1) {
			Autoupdate = i;
		}
		return true;
	}
	else if (strcmp(name, "ShowTooltip") == 0) {
		if (sscanf(value, "%d", &i) == 1) {
			ShowTooltip = i;
		}
		return true;
	}
    else if (strcmp(name, "DefaultFolder") == 0) {
        strncpy(DefaultFolder, value, sizeof(DefaultFolder));
		return true;
	}
    else if (strcmp(name, "Homepage") == 0) {
        strncpy(Homepage, value, sizeof(Homepage));
		return true;
	}

    return false;
}

void SSettings::ParseLine(char *line)
{
    char temp[1024], name[1024], value[1024];
    strncpy(temp, line, sizeof(temp));

    char * eq = strchr(temp, '=');
    if(!eq)
        return;
    *eq = 0;

    this->TrimLine(name, temp, sizeof(name));
    this->TrimLine(value, eq+1, sizeof(value));

	this->SetSetting(name, value);
}

void SSettings::TrimLine(char *dest, char *src, int size)
{
	int len;
	while (*src == ' ') src++;
	len = strlen(src);
	while (len > 0 && strchr(" \r\n", src[len-1])) len--;
	if (len >= size) len = size-1;
	strncpy(dest, src, len);
	dest[len] = 0;
}

bool SSettings::CheckFile(const char *path)
{
    bool found = false;
    FILE * file = fopen(path, "r");
    found = (file != NULL);
    fclose(file);
    return found;
}

bool SSettings::CheckIntegrity(const char *path)
{
    bool found = false;
    char line[100];
    FILE * file = fopen(path, "r");
    if(file != NULL)
    {
        fgets(line, sizeof(line), file);
        if (!strncmp(line, "APPVERSION",10))
            sscanf(line, "APPVERSION: R%d", &Revision);
        if (!strncmp(line, "# WiiBrowser Settingsfile",25))
            found = true;
    }
    fclose(file);
    return found;
}
